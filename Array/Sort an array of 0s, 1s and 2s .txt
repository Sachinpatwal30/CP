Sort an array of 0s, 1s and 2s in O(N)

1st Approch o(n2) check every element with other
2nd Approch  o(2n)

    void sortColors(vector < int > & x) {

      int n = x.size();

      int a = 0, b = 0, c = 0;

      for (int i = 0; i < n; i++) {
        if (x[i] == 0)
          a++;
        else if (x[i] == 1)
          b++;
        else
          c++;

      }

      for (int i = 0; i < n; i++) {
        if (a != 0) {
          x[i] = 0;
          a--;
          continue;
        } else if (b != 0) {
          x[i] = 1;
          b--;
          continue;
        } else {
          x[i] = 2;
          c--;
          continue;

        }

      }

    }



3rd and optimal approch O(N)
************************Dutch National flag algorithm************************************
swap element 0 to left side of LOW and swap element 2 on the right side of HIGH

    void sortColors(vector < int > & x) {

      int n = x.size();

      int low = 0, high = n - 1, mid = 0;

      while (mid <= high) {
        switch (x[mid]) {

        case 0:
          swap(x[mid], x[low]);
          mid++;
          low++;
          break;

        case 1:
          mid++;
          break;

        case 2:
          swap(x[mid], x[high]);
          high--;
          break;

        default:
          cout << "array conatins other elements also" << endl;
          break;

        }

      }

    }

